#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

// ссылка на задачу: https://www.codingame.com/ide/puzzle/shadows-of-the-knight-episode-1

using namespace std;

int main()
{
    int w; // ширина здания
    int h; // высота здания
    cin >> w >> h; cin.ignore();
    int n; // максимальное число ходов
    cin >> n; cin.ignore();
    int x; // стартовый X
    int y; // стартовый Y
    cin >> x >> y; cin.ignore();
    int x0 = 0; // левая граница ширины (x) здания, Left X
    int x1 = w - 1; // правая граница ширины (x) здания, равная максимальной ширине, Right X
    int y0 = 0; // верхняя граница высоты (y) здания, Up Y
    int y1 = h - 1; // нижняя граница высоты (y) здания, равная максимальной высоте, Down Y

    while (1) {
        int i;
        string bomb_dir; // направление, в котором необходимо двигаться (U, UR, R, DR, D, DL, L or UL)
        cin >> bomb_dir; cin.ignore();

        for (i = 0; bomb_dir[i]; i++) // разбираем строку-направление
        {
                switch (bomb_dir[i]) {
                case 'U':         
                    y1 = y - 1; // при инструкции "Выше" перемещаем нижнюю границу на (текущее местоположение - 1)
                    break;
                case 'D':     
                    y0 = y + 1; // при инструкции "Ниже" перемещаем верхнюю границу на (текущее местоположение + 1)
                    break;
                case 'L': 
                    x1 = x - 1; // при инструкции "Левее" перемещаем правую границу на (текущее местоположение - 1)
                    break;
                case 'R': 
                    x0 = x + 1; // при инструкции "Правее" перемещаем левую границу на (текущее местоположение + 1)
                    break;
            }
        }

        x = (x1 + x0) / 2; // наше текущее местоположение по X устанавливается на середину участка, на котором мы продолжим поиск
        y = (y1 + y0) / 2; // наше текущее местоположение по Y устанавливается на середину участка, на котором мы продолжим поиск

        cout << x << ' ' << y << endl;
    }
}